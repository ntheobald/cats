#num9proj_final.py

import sys
import numpy as np #for square rooting 
from queue import Queue #queues allow for cross communication between 
from threading import Thread 
import timeit


# 

#These threads below will produce data, as in calculate the numbers in a specific range
#these numbers will not be processed in these threads for speed
def T1s1(out_a,nstart,nend,obj): 
    Tx=nstart #starting parameter
    while Tx<nend: #how many repetitions will you do
        Ty=0      
        while Ty<obj: #obj is the objective you are searching for, it doesnt make sense to do 10000x and 100y if the solution is 10000, should match solution
            Ty=Ty+1
            entrence=[] #creating list to be passed into queue
            entrence.append(Tx)
            entrence.append(Ty)
            out_a.put(entrence) #entering the 'a' queue
        Tx=Tx+1
    reg=False #once this ends, it will set reg to false, so that a different thread can know this thread finished its process 
    out_a.put(reg) 
    quit()
          
def T3s1(out_b,nstart,nend,obj): 
    Tx=nstart
    while Tx<nend: 
        Ty=0      
        while Ty<obj:
            Ty=Ty+1
            entrence=[]
            entrence.append(Tx)
            entrence.append(Ty)
            out_b.put(entrence)
        Tx=Tx+1
    reg=False
    out_b.put(reg)
    quit()

def T5s1(out_c,nstart,nend,obj): 
    Tx=nstart
    while Tx<nend: 
        Ty=0      
        while Ty<obj:
            Ty=Ty+1
            entrence=[]
            entrence.append(Tx)
            entrence.append(Ty)
            out_c.put(entrence)
        Tx=Tx+1
    reg=False
    out_c.put(reg)
    quit()

def T7s1(out_d,nstart,nend,obj): 
    Tx=nstart
    while Tx<nend: 
        Ty=0      
        while Ty<obj:
            Ty=Ty+1
            entrence=[]
            entrence.append(Tx)
            entrence.append(Ty)
            out_d.put(entrence)
        Tx=Tx+1
    reg=False
    out_d.put(reg)
    quit()



# A thread that consumes data 
def T2s2(in_a,obj): 
    timing=0 #number of times that the solution was found (can be used for other equations if desired)
    while True:  #just runs forever
        lisst = in_a.get()   #pulling from the queue and setting equal to lisst, as it is in list form 
        if lisst==False:  #if the previous thread indicates otherwise, this will be set to false and thereby end the while loop
            quit()

        Tx=lisst[0]  #takes the first index and processes it as x
        Ty=lisst[-1] #takes second index and processed as y 
        Txs=Tx**2  #time to square each component
        Tys=Ty**2
        Txy=Txs+Tys #find 
        Tz=np.sqrt(Txy) #squre root for the hypotenus
        Txyz=Tx+Ty+Tz #add for the 'headline' sum

        if Txyz==obj and Tx<Ty and Ty<Tz: #x must be less than y, which is less than z
            print('ended here; match found')
            timing=timing+1
            print('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz))
            print('here is the triple result: '+str(Txyz))
            stop = timeit.default_timer() 
            print('Time: ', stop - start) #display current time
            file1 = open("triples_file.txt","a")
            file1.write('\n')  #save to the file and print on the txt doc
            file1.write('############################################################# SOLUTION BELOW!!!! #############################################################')
            file1.write('\n')
            file1.write('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz)+' here is the triple result: '+str(Txyz))
            file1.write('\n')
            file1.close()
            break 
            
            if timing==2:
                print('cool')
        if Tx<Ty and Ty<Tz and Txyz % 2 == 0:  #if you are having trouble with the .txt file, you can uncomment the section below for a verbose description of the processes and possibilities. 
            # print('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz))
            # print('here is the triple result: '+str(Txyz))
            file1 = open("triples_file.txt","a") #save to the file and print on the txt doc
            file1.write('['+str(Tx)+' , '+str(Ty)+' , '+str(Tz)+' , '+str(Txyz)+']')
            file1.write('\n')
            file1.close()

        stop = timeit.default_timer() 




def T4s2(in_b,obj): 
    timing=0
    while True: 
        lisst = in_b.get()   
        if lisst==False:
            quit()

        Tx=lisst[0]
        Ty=lisst[-1]
        Txs=Tx**2
        Tys=Ty**2
        Txy=Txs+Tys
        Tz=np.sqrt(Txy)
        Txyz=Tx+Ty+Tz

        if Txyz==obj and Tx<Ty and Ty<Tz:
            print('ended here; match found')
            timing=timing+1
            print('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz))
            print('here is the triple result: '+str(Txyz))
            # sys.exit('finished!')
            stop = timeit.default_timer()
            print('Time: ', stop - start)
            file1 = open("triples_file.txt","a")
            file1.write('\n')
            file1.write('############################################################# SOLUTION BELOW!!!! #############################################################')
            file1.write('\n')
            file1.write('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz)+' here is the triple result: '+str(Txyz))
            file1.write('\n')
            file1.close()
            break 
            
            if timing==2:
                print('cool')
        if Tx<Ty and Ty<Tz and Txyz % 2 == 0:
            # print('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz))
            # print('here is the triple result: '+str(Txyz))
            file1 = open("triples_file.txt","a")
            file1.write('['+str(Tx)+' , '+str(Ty)+' , '+str(Tz)+' , '+str(Txyz)+']')
            file1.write('\n')
            file1.close()

        stop = timeit.default_timer() 



def T6s2(in_c,obj): 
    timing=0
    while True: 
        lisst = in_c.get() 
        if lisst==False:
            quit()

        Tx=lisst[0]
        Ty=lisst[-1]
        Txs=Tx**2
        Tys=Ty**2
        Txy=Txs+Tys
        Tz=np.sqrt(Txy)
        Txyz=Tx+Ty+Tz

        if Txyz==obj and Tx<Ty and Ty<Tz:
            print('ended here; match found')
            timing=timing+1
            print('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz))
            print('here is the triple result: '+str(Txyz))
            # sys.exit('finished!')
            stop = timeit.default_timer()
            print('Time: ', stop - start)
            file1 = open("triples_file.txt","a")
            file1.write('\n')
            file1.write('############################################################# SOLUTION BELOW!!!! #############################################################')
            file1.write('\n')
            file1.write('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz)+' here is the triple result: '+str(Txyz))
            file1.write('\n')
            file1.close()
            break 
            
            if timing==2:
                print('cool')
        if Tx<Ty and Ty<Tz and Txyz % 2 == 0:
            # print('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz))
            # print('here is the triple result: '+str(Txyz))
            file1 = open("triples_file.txt","a")
            file1.write('['+str(Tx)+' , '+str(Ty)+' , '+str(Tz)+' , '+str(Txyz)+']')
            file1.write('\n')
            file1.close()

        stop = timeit.default_timer() 




def T8s2(in_d,obj): 
    timing=0
    while True: 
        lisst = in_d.get()   
        if lisst==False:
            quit()

        Tx=lisst[0]
        Ty=lisst[-1]
        Txs=Tx**2
        Tys=Ty**2
        Txy=Txs+Tys
        Tz=np.sqrt(Txy)
        Txyz=Tx+Ty+Tz

        if Txyz==obj and Tx<Ty and Ty<Tz:
            print('ended here; match found')
            timing=timing+1
            print('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz))
            print('here is the triple result: '+str(Txyz))
            # sys.exit('finished!')
            stop = timeit.default_timer()
            print('Time: ', stop - start)
            file1 = open("triples_file.txt","a")
            file1.write('\n')
            file1.write('############################################################# SOLUTION BELOW!!!! #############################################################')
            file1.write('\n')
            file1.write('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz)+' here is the triple result: '+str(Txyz))
            file1.write('\n')
            file1.close()
            break 
            
            if timing==2:
                print('cool')
        if Tx<Ty and Ty<Tz and Txyz % 2 == 0:
            # print('here is x: '+str(Tx)+' here is y: '+str(Ty)+' here is z: '+str(Tz))
            # print('here is the triple result: '+str(Txyz))
            file1 = open("triples_file.txt","a")
            file1.write('['+str(Tx)+' , '+str(Ty)+' , '+str(Tz)+' , '+str(Txyz)+']')
            file1.write('\n')
            file1.close()

        stop = timeit.default_timer() 










a=Queue() #callign upon the queue module and setting the queue to a, which can be appended with _in or _out
b=Queue()
c=Queue() 
d=Queue()
start = timeit.default_timer() #starting timer here
t1 = Thread(target = T1s1, args =(a,0,2500,10000)) #set the options of each thread (assign threads to processes and set values for args)
t2 = Thread(target = T2s2, args =(a,10000))
t3 = Thread(target = T3s1, args =(b,2501,5000,10000))
t4 = Thread(target = T4s2, args =(b,10000))
t5 = Thread(target = T5s1, args =(c,5001,7500,10000))
t6 = Thread(target = T6s2, args =(c,10000))
t7 = Thread(target = T7s1, args =(d,7501,10000,10000))
t8 = Thread(target = T8s2, args =(d,10000))
t1.start() #here is where the thread is started and is run using the options you previously set, no need to end the threads once they are running 
t2.start() 
t3.start() 
t4.start() 
t5.start() 
t6.start() 
t7.start() 
t8.start() 
 
quit()
